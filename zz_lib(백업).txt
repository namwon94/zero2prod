#####20250117_다듬기전(p46)#####
use actix_web::{web, App, HttpResponse, HttpServer, Responder};
use actix_web::dev::Server;

async fn health_check() -> impl Responder {
    HttpResponse::Ok().finish()
}

/*
    run을 public으로 마크해야 한다.
    run은 더 이상 바이너리 엔트리 포인트가 아니므로, proc-macro 주문없이 async로 마크할 수 있다.

    .await 호출을 하지 않으므로 더 이상 필요하지 않음 
*/
pub fn run() -> Result<Server, std::io::Error> {
    let server = HttpServer::new(|| {
        App::new()
            .route("/health_check", web::get().to(health_check))
    })
    .bind("127.0.0.1:8080")?
    .run();
    //.await
    Ok(server)
}

######20250117_ㅗ트가 하드코딩 하지 않게 하기 위한 작업 전#####
use actix_web::{web, App, HttpResponse, HttpServer, Responder};
use actix_web::dev::Server;

async fn health_check() -> impl Responder {
    HttpResponse::Ok().finish()
}

pub fn run(address: &str) -> Result<Server, std::io::Error> {
    let server = HttpServer::new(|| {
        App::new()
            .route("/health_check", web::get().to(health_check))
    })
    .bind(address)?
    .run();
    //.await
    Ok(server)
}

###작업 후#####
use actix_web::{web, App, HttpResponse, HttpServer, Responder};
use actix_web::dev::Server;
use std::net::TcpListener;

async fn health_check() -> impl Responder {
    HttpResponse::Ok().finish()
}

pub fn run(listener: TcpListener) -> Result<Server, std::io::Error> {
    let server = HttpServer::new(|| {
        App::new()
            .route("/health_check", web::get().to(health_check))
    })
    .listen(listener)?
    .run();
    //.await
    Ok(server)
}


