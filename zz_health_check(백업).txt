#####20250117_다듬기전(p46)#####
/*
    tokio::test는 테스트에 있어서 tokio::main과 동등하다
    #[test] 속성을 지정하는 수고를 덜 수 있다

    cargo expand --test health_checl을 사용해서 코드가 무엇을 생성하는지 확이할 수 있다.
*/

#[tokio::test]
async fn health_check_works() {
    //Arrange(준비)
    spawn_app();
    //reqwest 를 사용해서 애플리케이션에 대한 HTTP 요청을 수행한다
    let client = reqwest::Client::new();

    //Act(조작)
    let response = client
        .get("http://127.0.0.1:8080/health_check")
        .send()
        .await
        .expect("Faules to exectue request");

    //Assert(결과 확인)
    assert!(response.status().is_success());
    assert_eq!(Some(0), response.content_length());
}


// .await를 호출하지 않으므로 비동기처리(async)가 아니여도 된다.
// 테스트를 실행하고 있으므로, 오류를 전파하지 않아도 된다.
// 만약 필요한 셋업을 수행하는 데 실해한다면, 모즌 작업을 깨뜨리면 된다.
fn spawn_app() {
    let server = zero2prod::run().expect("Failed to bind address");
    // 서버를 백그라운드로 구동
    // tokio:spawn은 생성된 퓨처에 대한 핸들을 반환하다. 하지만 여기서는 사용을 안하므로 let을 바인딩 하지 않는다.
    let _ = tokio::spawn(server);
}

/* 
use zero2prod::main 이 에러나는 이류 프로젝트를 라이브러리와 바이너리로 리팩터링을 안했기 때문 
    모든 로직은 라이브러리 크레이트에 존재, 바이ㅓ리 자체는 매우 작은 main  gkatnfmf rkwls dpsxmflvhdlsxmrk ehla
*/

####20250117_포트를 하드코딩 하지않는 작업 전####
#[tokio::test]
async fn health_check_works() {
    //Arrange(준비)
    spawn_app();
    //reqwest 를 사용해서 애플리케이션에 대한 HTTP 요청을 수행한다
    let client = reqwest::Client::new();

    //Act(조작)
    let response = client
        .get("http://127.0.0.1:8080/health_check")
        .send()
        .await
        .expect("Faules to exectue request");

    //Assert(결과 확인)
    assert!(response.status().is_success());
    assert_eq!(Some(0), response.content_length());
}

fn spawn_app() {
    let server = zero2prod::run("127.0.0.1:0").expect("Failed to bind address");
    // 서버를 백그라운드로 구동
    // tokio:spawn은 생성된 퓨처에 대한 핸들을 반환하다. 하지만 여기서는 사용을 안하므로 let을 바인딩 하지 않는다.
    let _ = tokio::spawn(server);
}

/*
    tokio::test는 테스트에 있어서 tokio::main과 동등하다
    #[test] 속성을 지정하는 수고를 덜 수 있다

    cargo expand --test health_checl을 사용해서 코드가 무엇을 생성하는지 확이할 수 있다.
*/

####작업 후#####
use std::net::TcpListener;

#[tokio::test]
async fn health_check_works() {
    //Arrange(준비)
    let address = spawn_app();
    //reqwest 를 사용해서 애플리케이션에 대한 HTTP 요청을 수행한다
    let client = reqwest::Client::new();

    //Act(조작)
    let response = client
        .get(&format!("{}/health_check", &address))
        .send()
        .await
        .expect("Faules to exectue request");

    //Assert(결과 확인)
    assert!(response.status().is_success());
    assert_eq!(Some(0), response.content_length());
}

fn spawn_app() -> String {
    let listener = TcpListener::bind("127.0.0.1:0")
        .expect("Failed to bind random port");
    //OS가 할당한 포트 번호를 추출한다.
    let port = listener.local_addr().unwrap().port();
    let server = zero2prod::run(listener).expect("Failed to bind address");
    let _ = tokio::spawn(server);
    //애플리케이션 주소를 호출자에게 반환한다.
    format!("http://127.0.0.1:{}", port)
}




####20250123####
pub async fn subscribe(form: web::Form<FormData>, pool: web::Data<PgPool>) -> HttpResponse {
    //무작위로 고유 식별자를 생성하자.
    let request_id = Uuid::new_v4();
    //Spans는 logs와 같이 연관 레벨을 갖는다. 'info_span'은 info레벨의 span을 생성한다.
    let request_span = tracing::info_span!(
        "Adding a new subscriber (tracing::info_span 사용)",
        %request_id,
        subscriber_email = %form.email,
        subscriber_name = %form.name
    );
    //async 함수에서 'enter'를 사용하면 그대로 재난이 발생한다. 지금은 잠시 참아주되, 집에서는 절대 하지 말자. 퓨처측정하기 절을 참조하자 (20250122 작성)
    let _request_span_guard = request_span.enter();
    //query_span에 대해 '.enter'를 호출하지 않는다. '.instrument' 쿼리 퓨처 수명 주기 안에서 적절한 시점에 이를 관리한다.
    let query_span = tracing::info_span!(
        "Saving new subscriber deatils in the database(tacing::info_span )"
    );
    /* 
    tracing::info!(
        "request_id {} - Adding '{}' '{}' as a new subscriber (tracing::info 사용)",
        request_id,
        form.email,
        form.name
    );
    tracing::info!(
        "request_id {} - Saving new subscriber details in the database",
        request_id
    );
    */
    //'Result'는 'Ok'와 'Err'라는 두개의 변형(variant)를 갖는다.(성공과 실패 의미)
    //'match' 구문을 사용해서 결과에 따라 무엇을 수행할지 선택한다.
    match sqlx::query!(
        r#"
        INSERT INTO subscriptions (id, email, name, subscribed_at)
        VALUES ($1, $2, $3, $4)
        "#,
        Uuid::new_v4(),
        form.email,
        form.name,
        Utc::now()
    )
    //'get_ref'를 사용해서 'web::Data'로 감싸진 'PgConnection'에 대한 불변 참조(immutable reference)를 얻는다.
    // -> 해당 풀을 드롭-인 대체로 이용한다.
    .execute(pool.get_ref())
    .instrument(query_span)
    .await
    {
        Ok(_) => {
            tracing::info!("New subscriber details have been saved");
            HttpResponse::Ok().finish()
        },
        Err(e) => {
            //우리가 기대한 대로 작동하지 않은 경우, println을 사용해서 오류에 관한 정보를 잡아낸다.
            //println!("Failed to execute query: {}", e);
            tracing::error!("failed to execute query: {}", e);
            HttpResponse::InternalServerError().finish()
        }
    }
}