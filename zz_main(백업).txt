#####20250117_다듬기전(p46)#####
use zero2prod::run;

#[tokio::main]
async fn main() -> std::io::Result<()> {
    // 주소 바인딩에 실패하면 io::Error를 발생시킨다
    // 그렇지 않으면 Server에 대해 .await를 호출한다.
    run()?.await
}

#####20250117_포트를 하드코딩하지 않기 위한 작업 전#####
use zero2prod::run;

#[tokio::main]
async fn main() -> std::io::Result<()> {
    // 주소 바인딩에 실패하면 io::Error를 발생시킨다
    // 그렇지 않으면 Server에 대해 .await를 호출한다.
    run("127.0.0.1:8080")?.await
}

###작업 후(TcpListener를 import 해야됨 -> 내 생각)#####
use zero2prod::run;
use std::net::TcpListener;


#[tokio::main]
async fn main() -> std::io::Result<()> {
    // 주소 바인딩에 실패하면 io::Error를 발생시킨다
    // 그렇지 않으면 Server에 대해 .await를 호출한다.
    let listener = TcpListener::bind("127.0.0.1:0")?;
    run(listener)?.await
}

######20250205######
use std::net::TcpListener;
//use actix_web::web::Json;
use zero2prod::startup::run;
use zero2prod::configuration::get_configuration;
//use sqlx::PgPool;
use sqlx::postgres::PgPoolOptions;
use zero2prod::telemetry::{get_subscriber, init_subscriber};
//use secrecy::ExposeSecret;
use zero2prod::email_client::EmailClient;

/*
   'init'는 'set_logger'를 호출한다. 다른 작업은 필요하지 않다.
    RUST_LOG 환경변수가 설정되어 있지 않으면 info 및 그 이상의 레벨의 모든 로그를 출력한다.
    tracing 사용으로 env_logger 주석처리
    env_logger::Builder::from_env(Env::default().default_filter_or("info")).init();
*/

#[tokio::main]
async fn main() -> std::io::Result<()> {      
    let subscriber = get_subscriber("zero2prod".into(), "info".into(), std::io::stdout);
    init_subscriber(subscriber);
    // 구성을 읽을 수 없으면 패닉에 빠진다
    let configuration = get_configuration().expect("Failed to read configuration.");
    let connection_pool = PgPoolOptions::new()
        .acquire_timeout(std::time::Duration::from_secs(2))
        .connect_lazy_with(
            configuration.database.with_db()
        );

    //20250204 추가 - 'configuration'를 사용해서 'EmailClient'를 만든다.
    let sender_email = configuration.email_client.sender()
        .expect("Invalid sender email address");
    let timeout = configuration.email_client.timeout();
    let email_client = EmailClient::new(
        configuration.email_client.base_url,
        sender_email,
        configuration.email_client.authorization_token,
        //configuration으로부터 새로운 인자를 전달한다 202402025
        timeout
    );
    
    //20250204 추가

    // 하드코딩했던 '8080'을 제거했다. 해당 값은 세팅에서 얻는다.
    let address = format!("{}:{}",configuration.application.host, configuration.application.port);
    let listener = TcpListener::bind(address)?;
    run(listener, connection_pool, email_client)?.await
}